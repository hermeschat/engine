// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChannelPermissions(t *testing.T) {
	t.Parallel()

	query := ChannelPermissions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChannelPermissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelPermissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ChannelPermissions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelPermissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChannelPermissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelPermissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChannelPermissionExists(ctx, tx, o.ChannelID, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if ChannelPermission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChannelPermissionExists to return true, but got false.")
	}
}

func testChannelPermissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	channelPermissionFound, err := FindChannelPermission(ctx, tx, o.ChannelID, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if channelPermissionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChannelPermissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ChannelPermissions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChannelPermissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ChannelPermissions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChannelPermissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	channelPermissionOne := &ChannelPermission{}
	channelPermissionTwo := &ChannelPermission{}
	if err = randomize.Struct(seed, channelPermissionOne, channelPermissionDBTypes, false, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, channelPermissionTwo, channelPermissionDBTypes, false, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = channelPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = channelPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChannelPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChannelPermissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	channelPermissionOne := &ChannelPermission{}
	channelPermissionTwo := &ChannelPermission{}
	if err = randomize.Struct(seed, channelPermissionOne, channelPermissionDBTypes, false, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, channelPermissionTwo, channelPermissionDBTypes, false, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = channelPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = channelPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func channelPermissionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func channelPermissionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChannelPermission) error {
	*o = ChannelPermission{}
	return nil
}

func testChannelPermissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ChannelPermission{}
	o := &ChannelPermission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ChannelPermission object: %s", err)
	}

	AddChannelPermissionHook(boil.BeforeInsertHook, channelPermissionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	channelPermissionBeforeInsertHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.AfterInsertHook, channelPermissionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	channelPermissionAfterInsertHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.AfterSelectHook, channelPermissionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	channelPermissionAfterSelectHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.BeforeUpdateHook, channelPermissionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	channelPermissionBeforeUpdateHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.AfterUpdateHook, channelPermissionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	channelPermissionAfterUpdateHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.BeforeDeleteHook, channelPermissionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	channelPermissionBeforeDeleteHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.AfterDeleteHook, channelPermissionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	channelPermissionAfterDeleteHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.BeforeUpsertHook, channelPermissionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	channelPermissionBeforeUpsertHooks = []ChannelPermissionHook{}

	AddChannelPermissionHook(boil.AfterUpsertHook, channelPermissionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	channelPermissionAfterUpsertHooks = []ChannelPermissionHook{}
}

func testChannelPermissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChannelPermissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(channelPermissionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChannelPermissionToOneChannelUsingChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ChannelPermission
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, channelPermissionDBTypes, false, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChannelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Channel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChannelPermissionSlice{&local}
	if err = local.L.LoadChannel(ctx, tx, false, (*[]*ChannelPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Channel = nil
	if err = local.L.LoadChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChannelPermissionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ChannelPermission
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, channelPermissionDBTypes, false, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChannelPermissionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*ChannelPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChannelPermissionToOneSetOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ChannelPermission
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelPermissionDBTypes, false, strmangle.SetComplement(channelPermissionPrimaryKeyColumns, channelPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Channel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChannelID != x.ID {
			t.Error("foreign key was wrong value", a.ChannelID)
		}

		if exists, err := ChannelPermissionExists(ctx, tx, a.ChannelID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testChannelPermissionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ChannelPermission
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelPermissionDBTypes, false, strmangle.SetComplement(channelPermissionPrimaryKeyColumns, channelPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := ChannelPermissionExists(ctx, tx, a.ChannelID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testChannelPermissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChannelPermissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChannelPermissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChannelPermissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChannelPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	channelPermissionDBTypes = map[string]string{`ChannelID`: `integer`, `UserID`: `integer`, `Permission`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                        = bytes.MinRead
)

func testChannelPermissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(channelPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(channelPermissionAllColumns) == len(channelPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChannelPermissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(channelPermissionAllColumns) == len(channelPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChannelPermission{}
	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, channelPermissionDBTypes, true, channelPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(channelPermissionAllColumns, channelPermissionPrimaryKeyColumns) {
		fields = channelPermissionAllColumns
	} else {
		fields = strmangle.SetComplement(
			channelPermissionAllColumns,
			channelPermissionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChannelPermissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChannelPermissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(channelPermissionAllColumns) == len(channelPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ChannelPermission{}
	if err = randomize.Struct(seed, &o, channelPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChannelPermission: %s", err)
	}

	count, err := ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, channelPermissionDBTypes, false, channelPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChannelPermission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChannelPermission: %s", err)
	}

	count, err = ChannelPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
