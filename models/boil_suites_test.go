// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembers)
	t.Run("ChannelPermissions", testChannelPermissions)
	t.Run("Channels", testChannels)
	t.Run("Messages", testMessages)
	t.Run("Migrations", testMigrations)
	t.Run("Roles", testRoles)
	t.Run("UserRoles", testUserRoles)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersDelete)
	t.Run("ChannelPermissions", testChannelPermissionsDelete)
	t.Run("Channels", testChannelsDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("Migrations", testMigrationsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("UserRoles", testUserRolesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersQueryDeleteAll)
	t.Run("ChannelPermissions", testChannelPermissionsQueryDeleteAll)
	t.Run("Channels", testChannelsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("Migrations", testMigrationsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("UserRoles", testUserRolesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersSliceDeleteAll)
	t.Run("ChannelPermissions", testChannelPermissionsSliceDeleteAll)
	t.Run("Channels", testChannelsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("Migrations", testMigrationsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("UserRoles", testUserRolesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersExists)
	t.Run("ChannelPermissions", testChannelPermissionsExists)
	t.Run("Channels", testChannelsExists)
	t.Run("Messages", testMessagesExists)
	t.Run("Migrations", testMigrationsExists)
	t.Run("Roles", testRolesExists)
	t.Run("UserRoles", testUserRolesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersFind)
	t.Run("ChannelPermissions", testChannelPermissionsFind)
	t.Run("Channels", testChannelsFind)
	t.Run("Messages", testMessagesFind)
	t.Run("Migrations", testMigrationsFind)
	t.Run("Roles", testRolesFind)
	t.Run("UserRoles", testUserRolesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersBind)
	t.Run("ChannelPermissions", testChannelPermissionsBind)
	t.Run("Channels", testChannelsBind)
	t.Run("Messages", testMessagesBind)
	t.Run("Migrations", testMigrationsBind)
	t.Run("Roles", testRolesBind)
	t.Run("UserRoles", testUserRolesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersOne)
	t.Run("ChannelPermissions", testChannelPermissionsOne)
	t.Run("Channels", testChannelsOne)
	t.Run("Messages", testMessagesOne)
	t.Run("Migrations", testMigrationsOne)
	t.Run("Roles", testRolesOne)
	t.Run("UserRoles", testUserRolesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersAll)
	t.Run("ChannelPermissions", testChannelPermissionsAll)
	t.Run("Channels", testChannelsAll)
	t.Run("Messages", testMessagesAll)
	t.Run("Migrations", testMigrationsAll)
	t.Run("Roles", testRolesAll)
	t.Run("UserRoles", testUserRolesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersCount)
	t.Run("ChannelPermissions", testChannelPermissionsCount)
	t.Run("Channels", testChannelsCount)
	t.Run("Messages", testMessagesCount)
	t.Run("Migrations", testMigrationsCount)
	t.Run("Roles", testRolesCount)
	t.Run("UserRoles", testUserRolesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersHooks)
	t.Run("ChannelPermissions", testChannelPermissionsHooks)
	t.Run("Channels", testChannelsHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("Migrations", testMigrationsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("UserRoles", testUserRolesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersInsert)
	t.Run("ChannelMembers", testChannelMembersInsertWhitelist)
	t.Run("ChannelPermissions", testChannelPermissionsInsert)
	t.Run("ChannelPermissions", testChannelPermissionsInsertWhitelist)
	t.Run("Channels", testChannelsInsert)
	t.Run("Channels", testChannelsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("Migrations", testMigrationsInsert)
	t.Run("Migrations", testMigrationsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("UserRoles", testUserRolesInsert)
	t.Run("UserRoles", testUserRolesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ChannelMemberToChannelUsingChannel", testChannelMemberToOneChannelUsingChannel)
	t.Run("ChannelMemberToUserUsingUser", testChannelMemberToOneUserUsingUser)
	t.Run("ChannelPermissionToChannelUsingChannel", testChannelPermissionToOneChannelUsingChannel)
	t.Run("ChannelPermissionToUserUsingUser", testChannelPermissionToOneUserUsingUser)
	t.Run("ChannelToUserUsingCreator", testChannelToOneUserUsingCreator)
	t.Run("MessageToChannelUsingDST", testMessageToOneChannelUsingDST)
	t.Run("MessageToUserUsingOrigin", testMessageToOneUserUsingOrigin)
	t.Run("MessageToMessageUsingParent", testMessageToOneMessageUsingParent)
	t.Run("UserRoleToRoleUsingRole", testUserRoleToOneRoleUsingRole)
	t.Run("UserRoleToUserUsingUser", testUserRoleToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ChannelToChannelMembers", testChannelToManyChannelMembers)
	t.Run("ChannelToChannelPermissions", testChannelToManyChannelPermissions)
	t.Run("ChannelToDSTMessages", testChannelToManyDSTMessages)
	t.Run("MessageToParentMessages", testMessageToManyParentMessages)
	t.Run("RoleToUserRoles", testRoleToManyUserRoles)
	t.Run("UserToChannelMembers", testUserToManyChannelMembers)
	t.Run("UserToChannelPermissions", testUserToManyChannelPermissions)
	t.Run("UserToCreatorChannels", testUserToManyCreatorChannels)
	t.Run("UserToOriginMessages", testUserToManyOriginMessages)
	t.Run("UserToUserRoles", testUserToManyUserRoles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ChannelMemberToChannelUsingChannelMembers", testChannelMemberToOneSetOpChannelUsingChannel)
	t.Run("ChannelMemberToUserUsingChannelMembers", testChannelMemberToOneSetOpUserUsingUser)
	t.Run("ChannelPermissionToChannelUsingChannelPermissions", testChannelPermissionToOneSetOpChannelUsingChannel)
	t.Run("ChannelPermissionToUserUsingChannelPermissions", testChannelPermissionToOneSetOpUserUsingUser)
	t.Run("ChannelToUserUsingCreatorChannels", testChannelToOneSetOpUserUsingCreator)
	t.Run("MessageToChannelUsingDSTMessages", testMessageToOneSetOpChannelUsingDST)
	t.Run("MessageToUserUsingOriginMessages", testMessageToOneSetOpUserUsingOrigin)
	t.Run("MessageToMessageUsingParentMessages", testMessageToOneSetOpMessageUsingParent)
	t.Run("UserRoleToRoleUsingUserRoles", testUserRoleToOneSetOpRoleUsingRole)
	t.Run("UserRoleToUserUsingUserRoles", testUserRoleToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ChannelToUserUsingCreatorChannels", testChannelToOneRemoveOpUserUsingCreator)
	t.Run("MessageToChannelUsingDSTMessages", testMessageToOneRemoveOpChannelUsingDST)
	t.Run("MessageToUserUsingOriginMessages", testMessageToOneRemoveOpUserUsingOrigin)
	t.Run("MessageToMessageUsingParentMessages", testMessageToOneRemoveOpMessageUsingParent)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ChannelToChannelMembers", testChannelToManyAddOpChannelMembers)
	t.Run("ChannelToChannelPermissions", testChannelToManyAddOpChannelPermissions)
	t.Run("ChannelToDSTMessages", testChannelToManyAddOpDSTMessages)
	t.Run("MessageToParentMessages", testMessageToManyAddOpParentMessages)
	t.Run("RoleToUserRoles", testRoleToManyAddOpUserRoles)
	t.Run("UserToChannelMembers", testUserToManyAddOpChannelMembers)
	t.Run("UserToChannelPermissions", testUserToManyAddOpChannelPermissions)
	t.Run("UserToCreatorChannels", testUserToManyAddOpCreatorChannels)
	t.Run("UserToOriginMessages", testUserToManyAddOpOriginMessages)
	t.Run("UserToUserRoles", testUserToManyAddOpUserRoles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ChannelToDSTMessages", testChannelToManySetOpDSTMessages)
	t.Run("MessageToParentMessages", testMessageToManySetOpParentMessages)
	t.Run("UserToCreatorChannels", testUserToManySetOpCreatorChannels)
	t.Run("UserToOriginMessages", testUserToManySetOpOriginMessages)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ChannelToDSTMessages", testChannelToManyRemoveOpDSTMessages)
	t.Run("MessageToParentMessages", testMessageToManyRemoveOpParentMessages)
	t.Run("UserToCreatorChannels", testUserToManyRemoveOpCreatorChannels)
	t.Run("UserToOriginMessages", testUserToManyRemoveOpOriginMessages)
}

func TestReload(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersReload)
	t.Run("ChannelPermissions", testChannelPermissionsReload)
	t.Run("Channels", testChannelsReload)
	t.Run("Messages", testMessagesReload)
	t.Run("Migrations", testMigrationsReload)
	t.Run("Roles", testRolesReload)
	t.Run("UserRoles", testUserRolesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersReloadAll)
	t.Run("ChannelPermissions", testChannelPermissionsReloadAll)
	t.Run("Channels", testChannelsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("Migrations", testMigrationsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("UserRoles", testUserRolesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersSelect)
	t.Run("ChannelPermissions", testChannelPermissionsSelect)
	t.Run("Channels", testChannelsSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("Migrations", testMigrationsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("UserRoles", testUserRolesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersUpdate)
	t.Run("ChannelPermissions", testChannelPermissionsUpdate)
	t.Run("Channels", testChannelsUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("Migrations", testMigrationsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("UserRoles", testUserRolesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ChannelMembers", testChannelMembersSliceUpdateAll)
	t.Run("ChannelPermissions", testChannelPermissionsSliceUpdateAll)
	t.Run("Channels", testChannelsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("Migrations", testMigrationsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("UserRoles", testUserRolesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
