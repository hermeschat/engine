// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/api/api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DestroySessionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DestroySessionRequest) Reset()         { *m = DestroySessionRequest{} }
func (m *DestroySessionRequest) String() string { return proto.CompactTextString(m) }
func (*DestroySessionRequest) ProtoMessage()    {}
func (*DestroySessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_72e96d957f9e0364, []int{0}
}
func (m *DestroySessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestroySessionRequest.Unmarshal(m, b)
}
func (m *DestroySessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestroySessionRequest.Marshal(b, m, deterministic)
}
func (dst *DestroySessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroySessionRequest.Merge(dst, src)
}
func (m *DestroySessionRequest) XXX_Size() int {
	return xxx_messageInfo_DestroySessionRequest.Size(m)
}
func (m *DestroySessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroySessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DestroySessionRequest proto.InternalMessageInfo

func (m *DestroySessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type Message struct {
	MessageType          string   `protobuf:"bytes,1,opt,name=messageType,proto3" json:"messageType,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Channel              string   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	To                   string   `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Body                 string   `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_72e96d957f9e0364, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *Message) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Message) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Message) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Message) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type CreateSessionRequest struct {
	ClientType           string   `protobuf:"bytes,1,opt,name=ClientType,proto3" json:"ClientType,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserIP               string   `protobuf:"bytes,3,opt,name=UserIP,proto3" json:"UserIP,omitempty"`
	UserAgent            string   `protobuf:"bytes,4,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	ClientVersion        string   `protobuf:"bytes,5,opt,name=ClientVersion,proto3" json:"ClientVersion,omitempty"`
	Node                 string   `protobuf:"bytes,6,opt,name=Node,proto3" json:"Node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSessionRequest) Reset()         { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()    {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_72e96d957f9e0364, []int{2}
}
func (m *CreateSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSessionRequest.Unmarshal(m, b)
}
func (m *CreateSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSessionRequest.Marshal(b, m, deterministic)
}
func (dst *CreateSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSessionRequest.Merge(dst, src)
}
func (m *CreateSessionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSessionRequest.Size(m)
}
func (m *CreateSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSessionRequest proto.InternalMessageInfo

func (m *CreateSessionRequest) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

func (m *CreateSessionRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *CreateSessionRequest) GetUserIP() string {
	if m != nil {
		return m.UserIP
	}
	return ""
}

func (m *CreateSessionRequest) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *CreateSessionRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *CreateSessionRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type Response struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_72e96d957f9e0364, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UserDiscoveryEvent struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ChannelID            string   `protobuf:"bytes,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserDiscoveryEvent) Reset()         { *m = UserDiscoveryEvent{} }
func (m *UserDiscoveryEvent) String() string { return proto.CompactTextString(m) }
func (*UserDiscoveryEvent) ProtoMessage()    {}
func (*UserDiscoveryEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_72e96d957f9e0364, []int{4}
}
func (m *UserDiscoveryEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDiscoveryEvent.Unmarshal(m, b)
}
func (m *UserDiscoveryEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDiscoveryEvent.Marshal(b, m, deterministic)
}
func (dst *UserDiscoveryEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDiscoveryEvent.Merge(dst, src)
}
func (m *UserDiscoveryEvent) XXX_Size() int {
	return xxx_messageInfo_UserDiscoveryEvent.Size(m)
}
func (m *UserDiscoveryEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDiscoveryEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UserDiscoveryEvent proto.InternalMessageInfo

func (m *UserDiscoveryEvent) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserDiscoveryEvent) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func init() {
	proto.RegisterType((*DestroySessionRequest)(nil), "DestroySessionRequest")
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*CreateSessionRequest)(nil), "CreateSessionRequest")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*UserDiscoveryEvent)(nil), "UserDiscoveryEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HermesClient is the client API for Hermes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HermesClient interface {
	KeepAlive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	NewMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	Deliverd(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Response, error)
	DestroySession(ctx context.Context, in *DestroySessionRequest, opts ...grpc.CallOption) (*Response, error)
	Join(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	Read(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
}

type hermesClient struct {
	cc *grpc.ClientConn
}

func NewHermesClient(cc *grpc.ClientConn) HermesClient {
	return &hermesClient{cc}
}

func (c *hermesClient) KeepAlive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Hermes/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) NewMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Hermes/NewMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) Deliverd(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Hermes/Deliverd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Hermes/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) DestroySession(ctx context.Context, in *DestroySessionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Hermes/DestroySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) Join(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Hermes/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) Read(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Hermes/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HermesServer is the server API for Hermes service.
type HermesServer interface {
	KeepAlive(context.Context, *Message) (*Response, error)
	NewMessage(context.Context, *Message) (*Response, error)
	Deliverd(context.Context, *Message) (*Response, error)
	CreateSession(context.Context, *CreateSessionRequest) (*Response, error)
	DestroySession(context.Context, *DestroySessionRequest) (*Response, error)
	Join(context.Context, *Message) (*Response, error)
	Read(context.Context, *Message) (*Response, error)
}

func RegisterHermesServer(s *grpc.Server, srv HermesServer) {
	s.RegisterService(&_Hermes_serviceDesc, srv)
}

func _Hermes_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hermes/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).KeepAlive(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hermes/NewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).NewMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_Deliverd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).Deliverd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hermes/Deliverd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).Deliverd(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hermes/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_DestroySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).DestroySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hermes/DestroySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).DestroySession(ctx, req.(*DestroySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hermes/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).Join(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hermes/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).Read(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hermes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Hermes",
	HandlerType: (*HermesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _Hermes_KeepAlive_Handler,
		},
		{
			MethodName: "NewMessage",
			Handler:    _Hermes_NewMessage_Handler,
		},
		{
			MethodName: "Deliverd",
			Handler:    _Hermes_Deliverd_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Hermes_CreateSession_Handler,
		},
		{
			MethodName: "DestroySession",
			Handler:    _Hermes_DestroySession_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Hermes_Join_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Hermes_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/api.proto",
}

func init() { proto.RegisterFile("pkg/api/api.proto", fileDescriptor_api_72e96d957f9e0364) }

var fileDescriptor_api_72e96d957f9e0364 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xdf, 0x4e, 0xe2, 0x40,
	0x14, 0xc6, 0xd3, 0x6e, 0x29, 0xf4, 0x6c, 0x20, 0xd9, 0x09, 0x90, 0x66, 0x21, 0xbb, 0x6c, 0xb3,
	0x17, 0x5e, 0xd5, 0x28, 0xfa, 0x00, 0x84, 0x9a, 0x08, 0x46, 0x62, 0xea, 0x9f, 0xfb, 0x42, 0x8f,
	0xd8, 0x08, 0x9d, 0x3a, 0x33, 0x62, 0x7a, 0xe1, 0x3b, 0xf8, 0x44, 0x3e, 0x9b, 0x99, 0x76, 0xa0,
	0xad, 0xe9, 0x05, 0xc9, 0x77, 0xbe, 0x39, 0x67, 0xf8, 0x9d, 0x73, 0xa6, 0xf0, 0x2b, 0x79, 0x5e,
	0x1f, 0x07, 0x49, 0x24, 0x7f, 0x6e, 0xc2, 0xa8, 0xa0, 0xce, 0x39, 0xf4, 0x3c, 0xe4, 0x82, 0xd1,
	0xf4, 0x16, 0x39, 0x8f, 0x68, 0xec, 0xe3, 0xcb, 0x2b, 0x72, 0x41, 0x86, 0x60, 0x29, 0x67, 0x16,
	0xda, 0xda, 0x48, 0x3b, 0xb2, 0xfc, 0xc2, 0x70, 0xde, 0xa1, 0x79, 0x8d, 0x9c, 0x07, 0x6b, 0x24,
	0x23, 0xf8, 0xb9, 0xcd, 0xe5, 0x5d, 0x9a, 0xa0, 0x4a, 0x2d, 0x5b, 0x84, 0x80, 0xf1, 0xc8, 0xe8,
	0xd6, 0xd6, 0xb3, 0xa3, 0x4c, 0x13, 0x1b, 0x9a, 0xab, 0xa7, 0x20, 0x8e, 0x71, 0x63, 0xff, 0xc8,
	0xec, 0x7d, 0x48, 0x3a, 0xa0, 0x0b, 0x6a, 0x1b, 0x99, 0xa9, 0x0b, 0x2a, 0xab, 0x97, 0x34, 0x4c,
	0xed, 0x46, 0x5e, 0x2d, 0xb5, 0xf3, 0xa9, 0x41, 0x77, 0xca, 0x30, 0x10, 0xf8, 0x8d, 0xfa, 0x0f,
	0xc0, 0x74, 0x13, 0x61, 0x2c, 0x4a, 0x2c, 0x25, 0x87, 0xf4, 0xc1, 0xbc, 0xe7, 0xc8, 0x66, 0x9e,
	0x82, 0x51, 0xd1, 0xc1, 0xbf, 0x51, 0x34, 0x2a, 0x92, 0x53, 0x90, 0x6a, 0xb2, 0xc6, 0x58, 0x28,
	0xa6, 0xc2, 0x20, 0xff, 0xa1, 0x9d, 0xdf, 0xfd, 0x80, 0x4c, 0x52, 0x28, 0xc6, 0xaa, 0x29, 0x1b,
	0x58, 0xd0, 0x10, 0x6d, 0x33, 0x6f, 0x40, 0x6a, 0xe7, 0x0c, 0x5a, 0x3e, 0xf2, 0x84, 0xc6, 0x3c,
	0x1b, 0xcf, 0x4a, 0x9e, 0xe7, 0xb4, 0x99, 0x26, 0x5d, 0x68, 0x20, 0x63, 0x94, 0x29, 0xcc, 0x3c,
	0x70, 0xe6, 0x40, 0xe4, 0x9f, 0x7b, 0x11, 0x5f, 0xd1, 0x1d, 0xb2, 0xf4, 0x62, 0x27, 0x29, 0x8a,
	0x9e, 0xb4, 0x4a, 0x4f, 0x43, 0xb0, 0xa6, 0xf9, 0x4c, 0x0f, 0xed, 0x16, 0xc6, 0xe9, 0x87, 0x0e,
	0xe6, 0x25, 0xb2, 0x2d, 0x72, 0x32, 0x02, 0xeb, 0x0a, 0x31, 0x99, 0x6c, 0xa2, 0x1d, 0x92, 0x96,
	0xab, 0x16, 0xfb, 0xdb, 0x72, 0x0f, 0x88, 0xff, 0x00, 0x16, 0xf8, 0xb6, 0xdf, 0x78, 0x6d, 0xca,
	0x5f, 0x68, 0x79, 0x28, 0x6f, 0x60, 0x61, 0x7d, 0xc2, 0x09, 0xb4, 0x2b, 0x2b, 0x23, 0x3d, 0xb7,
	0x6e, 0x85, 0xe5, 0x92, 0x31, 0x74, 0xaa, 0x8f, 0x93, 0xf4, 0xdd, 0xda, 0xd7, 0x5a, 0x2e, 0x1a,
	0x80, 0x31, 0xa7, 0x51, 0x5c, 0x0f, 0x31, 0x00, 0xc3, 0xc7, 0xa0, 0x9e, 0x70, 0x69, 0x66, 0x9f,
	0xc4, 0xf8, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x4e, 0x6f, 0x69, 0x27, 0x03, 0x00, 0x00,
}
